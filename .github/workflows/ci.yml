

# name: Full CI/CD Pipeline

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       redis:
#         image: redis:alpine
#         ports:
#           - 6379:6379
#       postgres:
#         image: postgres:latest
#         env:
#           POSTGRES_USER: admin
#           POSTGRES_PASSWORD: secret
#           POSTGRES_DB: weatherdb
#         ports:
#           - 5432:5432
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Python 3.9
#       uses: actions/setup-python@v4
#       with:
#         python-version: "3.9"

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r backend/requirements.txt
#         pip install pytest locust httpx pytest-asyncio

#     - name: Run unit tests
#       run: pytest backend/tests/ -v
#       env:
#         DATABASE_URL: "sqlite:///backend/weather.db" # Hardcoded for now
#         REDIS_URL: "redis://localhost:6379"     # Hardcoded for now
#         OPENWEATHER_API_KEY: "9d700c0c0c25726a887c42a0c667c9dd"  # Hardcoded for now
#         SECRET_KEY: "7bf196ef4e3db20e13c1b9c484e9060e6ee90cf40571c4f3447627bf104b9295"  # Hardcoded for now
#         ALGORITHM: "HS256"  # Hardcoded for now
#         TESTING: "true"  # Hardcoded for now

#     - name: Run load tests
#       run: |
#         # Start the backend server in the background
#         python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
#         # Wait for the server to start
#         sleep 15
#         # Run load tests
#         locust -f backend/tests/load_tests/locustfile.py \
#           --headless -u 50 -r 10 --run-time 1m \
#           --host http://localhost:8000

#   backup:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup SQLite
#         run: |
#           sudo apt-get update
#           sudo apt-get install sqlite3

#       - name: Run backup
#         run: |
#           mkdir -p infrastructure/backups
#           ./infrastructure/scripts/backup_restore.sh backup

#       - name: Upload backup artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: db-backups
#           path: infrastructure/backups/

#   # Removed the deploy job since it requires self-hosted runner


name: Full CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: weatherdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest locust httpx pytest-asyncio psycopg2-binary

    - name: Run database migrations
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: "postgresql://admin:secret@localhost:5432/weatherdb"

    - name: Run unit tests with PostgreSQL
      run: pytest backend/tests/ -v
      env:
        DATABASE_URL: "postgresql://admin:secret@localhost:5432/weatherdb"
        REDIS_URL: "redis://localhost:6379"
        OPENWEATHER_API_KEY: "9d700c0c0c25726a887c42a0c667c9dd"
        SECRET_KEY: "7bf196ef4e3db20e13c1b9c484e9060e6ee90cf40571c4f3447627bf104b9295"
        ALGORITHM: "HS256"
        TESTING: "true"

    - name: Run load tests with PostgreSQL
      run: |
        python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 15
        locust -f backend/tests/load_tests/locustfile.py \
          --headless -u 50 -r 10 --run-time 1m \
          --host http://localhost:8000
      env:
        DATABASE_URL: "postgresql://admin:secret@localhost:5432/weatherdb"
        REDIS_URL: "redis://localhost:6379"
        OPENWEATHER_API_KEY: "9d700c0c0c25726a887c42a0c667c9dd"
        SECRET_KEY: "7bf196ef4e3db20e13c1b9c484e9060e6ee90cf40571c4f3447627bf104b9295"
        ALGORITHM: "HS256"
        TESTING: "true"

  backup:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SQLite
        run: |
          sudo apt-get update
          sudo apt-get install sqlite3

      - name: Create SQLite database
        run: |
          mkdir -p backend
          touch backend/weather.db

      - name: Run backup
        run: |
          mkdir -p infrastructure/backups
          ./infrastructure/scripts/backup_restore.sh backup

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v3
        with:
          name: db-backups
          path: infrastructure/backups/

  deploy:
    needs: [test, backup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose

      - name: Docker Compose up
        run: |
          docker-compose up -d --build

      - name: Verify services
        run: |
          docker-compose ps
          docker-compose logs --tail=100

      - name: Health check
        run: |
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/health

      - name: Docker Compose down (cleanup)
        if: always()
        run: |
          docker-compose down -v