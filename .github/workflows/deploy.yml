# name: Deploy Weather App to AWS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   DOCKERHUB_USERNAME: teja5654
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#   AWS_REGION: "us-east-1"

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:14-alpine
#         env:
#           POSTGRES_USER: admin
#           POSTGRES_PASSWORD: 1234
#           POSTGRES_DB: weather
#         ports:
#           - 5432:5432
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

#       redis:
#         image: redis:alpine
#         ports:
#           - 6379:6379
#         options: --health-cmd "redis-cli ping" --health-interval 15s --health-timeout 5s --health-retries 3

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python 3.9
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.9"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r backend/requirements.txt
#           pip install pytest locust httpx pytest-asyncio psycopg2-binary

#       - name: Run unit tests
#         run: pytest backend/tests/ -v
#         env:
#           DATABASE_URL: "postgresql+psycopg2://admin:1234@localhost:5432/weather"
#           REDIS_URL: "redis://localhost:6379"
#           OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
#           SECRET_KEY: ${{ secrets.SECRET_KEY }}
#           ALGORITHM: "HS256"
#           TESTING: "true"
     
#       - name: Start backend service
#         run: |
#           export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
#           uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload &
#         env:
#             DATABASE_URL: "postgresql+psycopg2://admin:1234@localhost:5432/weather"
#             REDIS_URL: "redis://localhost:6379"
  

#       - name: Run load tests
#         run: |
#           locust -f backend/tests/load_tests/locustfile.py \
#             --headless -u 5 -r 10 --run-time 10s \
#             --host http://localhost:8000 > locust_result.txt
#         env:
#           DATABASE_URL: "postgresql+psycopg2://admin:1234@localhost:5432/weather"
#           REDIS_URL: "redis://localhost:6379"
#           OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
#           SECRET_KEY: ${{ secrets.SECRET_KEY }}
#           ALGORITHM: "HS256"
#           TESTING: "true"

#   build-push:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ env.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push backend image
#         run: |
#           docker build -t ${{ env.DOCKERHUB_USERNAME }}/weather-backend:latest -f backend/Dockerfile ./backend
#           docker push ${{ env.DOCKERHUB_USERNAME }}/weather-backend:latest

#       - name: Build and push frontend image
#         run: |
#           docker build -t ${{ env.DOCKERHUB_USERNAME }}/weather-frontend:latest -f backend/frontend/Dockerfile ./backend/frontend
#           docker push ${{ env.DOCKERHUB_USERNAME }}/weather-frontend:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-push
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: "1.11.2"  # Updated to match your local version

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Plan
#         run: terraform plan

#       - name: Terraform Apply
#         run: terraform apply -auto-approve

#       - name: Get Backend ALB DNS Name
#         id: backend-alb
#         run: |
#           BACKEND_ALB_DNS=$(terraform output -raw alb_dns_name)
#           echo "BACKEND_URL=http://$BACKEND_ALB_DNS:8000" >> $GITHUB_ENV

#       - name: Update Frontend Environment
#         run: |
#           echo "BACKEND_URL=${{ env.BACKEND_URL }}" >> frontend/.env